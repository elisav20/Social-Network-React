{"version":3,"sources":["utils/validators/validators.js","components/common/FormsControls/FormsControls.jsx","components/Login/LoginForm.jsx","components/Login/Login.jsx","components/Login/LoginContainer.jsx"],"names":["requiredField","value","undefined","maxLength","length","renderField","Element","input","meta","touched","error","props","hasError","className","maxLength20","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","Field","type","placeholder","name","component","validate","href","Login","isAuth","to","formData","email","password","rememberMe","login","connect","state","auth"],"mappings":"oIAAA,oEAAO,IAAMA,EAAgB,SAACC,GAAD,OACzBA,OAAQC,EAAY,sBAEXC,EAAY,SAACA,GAAD,OAAe,SAACF,GAAD,OACpCA,GAASA,EAAMG,QAAUD,OACnBD,EADN,wBAEuBC,EAFvB,e,wHCFSE,EACT,SAACC,GAAD,OACA,YAAoD,IAAjDC,EAAgD,EAAhDA,MAAgD,IAAzCC,KAAQC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,MAAYC,EAAY,iBACzCC,EAAWH,GAAWC,EAC5B,OACI,sBAAKG,UAAS,uBAAkBD,EAAW,QAAU,IAArD,UACI,8BACI,cAACN,EAAD,2BAAaC,GAAWI,MAE3BC,GAAY,qCAAQF,EAAR,a,mHCNvBI,EAAcX,YAAU,IAiDfY,EAJQC,YAAU,CAC7BC,KAAM,SADaD,EA3CL,SAAC,GAA6B,IAA3BE,EAA0B,EAA1BA,aAAcR,EAAY,EAAZA,MAC/B,OACI,uBAAMS,SAAUD,EAAhB,UACI,sBAAKL,UAAU,UAAf,UACI,qBAAKA,UAAU,cAAf,SACI,cAACO,EAAA,EAAD,CACIC,KAAK,QACLC,YAAY,QACZC,KAAK,QACLC,UAAWnB,YAAY,SACvBoB,SAAU,CAACzB,IAAec,OAGlC,qBAAKD,UAAU,cAAf,SACI,cAACO,EAAA,EAAD,CACIC,KAAK,WACLC,YAAY,WACZE,UAAWnB,YAAY,SACvBoB,SAAU,CAACzB,IAAec,GAC1BS,KAAK,eAGb,sBAAKV,UAAU,uBAAf,UACI,cAACO,EAAA,EAAD,CACIC,KAAK,WACLG,UAAWnB,YAAY,SACvBkB,KAAK,eAJb,iBAQA,mBAAGG,KAAK,UAAUb,UAAU,OAA5B,sCAIHH,GAAS,qBAAKG,UAAU,qBAAf,SAAqCH,IAC/C,sBAAKG,UAAU,SAAf,UACI,8CACA,sD,OCrBDc,EAnBD,SAAChB,GAOX,OAAIA,EAAMiB,OACC,cAAC,IAAD,CAAUC,GAAG,aAIpB,sBAAKhB,UAAU,aAAf,UACI,uCACA,cAAC,EAAD,CAAWM,SAbF,SAACW,GACd,IAAQC,EAAgCD,EAAhCC,MAAOC,EAAyBF,EAAzBE,SAAUC,EAAeH,EAAfG,WAEzBtB,EAAMuB,MAAMH,EAAOC,EAAUC,UCKtBE,uBAJS,SAACC,GAAD,MAAY,CAChCR,OAAQQ,EAAMC,KAAKT,UAGiB,CACpCM,WADWC,EARQ,SAACxB,GACpB,OAAO,cAAC,EAAD,eAAWA","file":"static/js/6.f30fd3c1.chunk.js","sourcesContent":["export const requiredField = (value) =>\r\n    value ? undefined : \"Field is required!\";\r\n\r\nexport const maxLength = (maxLength) => (value) =>\r\n    value && value.length <= maxLength\r\n        ? undefined\r\n        : `Max length is ${maxLength} symbols`;\r\n","import React from \"react\";\r\n\r\nexport const renderField =\r\n    (Element) =>\r\n    ({ input, meta: { touched, error }, ...props }) => {\r\n        const hasError = touched && error;\r\n        return (\r\n            <div className={`form-control ${hasError ? \"error\" : \"\"}`}>\r\n                <div>\r\n                    <Element {...input} {...props} />\r\n                </div>\r\n                {hasError && <span> {error} </span>}\r\n            </div>\r\n        );\r\n    };\r\n","import React from \"react\";\r\nimport { reduxForm, Field } from \"redux-form\";\r\nimport { requiredField, maxLength } from \"../../utils/validators/validators\";\r\nimport { renderField } from \"../common/FormsControls/FormsControls\";\r\n\r\nconst maxLength20 = maxLength(20);\r\n\r\nconst LoginForm = ({ handleSubmit, error }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"content\">\r\n                <div className=\"input-field\">\r\n                    <Field\r\n                        type=\"email\"\r\n                        placeholder=\"Email\"\r\n                        name=\"email\"\r\n                        component={renderField(\"input\")}\r\n                        validate={[requiredField, maxLength20]}\r\n                    />\r\n                </div>\r\n                <div className=\"input-field\">\r\n                    <Field\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        component={renderField(\"input\")}\r\n                        validate={[requiredField, maxLength20]}\r\n                        name=\"password\"\r\n                    />\r\n                </div>\r\n                <div className=\"input-field remember\">\r\n                    <Field\r\n                        type=\"checkbox\"\r\n                        component={renderField(\"input\")}\r\n                        name=\"rememberMe\"\r\n                    />\r\n                    Remember me\r\n                </div>\r\n                <a href=\"/forgot\" className=\"link\">\r\n                    Forgot Your Password?\r\n                </a>\r\n            </div>\r\n            {error && <div className=\"form-summary-error\">{error}</div>}\r\n            <div className=\"action\">\r\n                <button>Register</button>\r\n                <button>Sign in</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm({\r\n    form: \"login\",\r\n})(LoginForm);\r\n\r\nexport default LoginReduxForm;\r\n","import React from \"react\";\r\nimport LoginForm from \"./LoginForm\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        const { email, password, rememberMe } = formData;\r\n\r\n        props.login(email, password, rememberMe);\r\n    };\r\n\r\n    if (props.isAuth) {\r\n        return <Navigate to=\"/profile\" />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"login-form\">\r\n            <h1>Login</h1>\r\n            <LoginForm onSubmit={onSubmit} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { login } from \"../../redux/authReducer\";\r\nimport Login from \"./Login\";\r\n\r\nconst LoginContainer = (props) => {\r\n    return <Login {...props} />;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    login,\r\n})(LoginContainer);\r\n"],"sourceRoot":""}